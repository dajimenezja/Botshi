import { Chat } from 'twitch-js';
import * as crypto from 'crypto';

interface TwitchConfig {
    username: string;
    token: string;
    clientId: string;
    clientSecret: string;
    refreshToken: string;
    channels: string[];
    reconnectInterval?: number;
    tokenRefreshInterval?: number;
    encryptionKey: string;
    storage?: TokenStorage;
}

interface TokenResponse {
    access_token: string;
    refresh_token: string;
    expires_in: number;
}

interface EncryptedTokens {
    iv: string;
    accessToken: string;
    refreshToken: string;
    expiresAt: number;
}

interface TokenStorage {
    save(tokens: EncryptedTokens): Promise<void>;
    load(): Promise<EncryptedTokens | null>;
}

// File-based token storage implementation
class FileTokenStorage implements TokenStorage {
    private filePath: string;

    constructor(filePath: string = './.tokens') {
        this.filePath = filePath;
    }

    async save(tokens: EncryptedTokens): Promise<void> {
        const fs = await import('fs/promises');
        await fs.writeFile(
            this.filePath,
            JSON.stringify(tokens),
            { encoding: 'utf8', mode: 0o600 } // Restrictive file permissions
        );
    }

    async load(): Promise<EncryptedTokens | null> {
        try {
            const fs = await import('fs/promises');
            const data = await fs.readFile(this.filePath, 'utf8');
            return JSON.parse(data) as EncryptedTokens;
        } catch (error) {
            return null;
        }
    }
}

class TokenEncryption {
    private key: Buffer;
    private algorithm:crypto.CipherGCMTypes = 'aes-256-gcm';

    constructor(encryptionKey: string) {
        // Create a 32-byte key from the provided string
        this.key = crypto.scryptSync(encryptionKey, 'salt', 32);
    }

    encrypt(text: string): { encrypted: string; iv: string } {
        const iv = crypto.randomBytes(16);
        const cipher = crypto.createCipheriv(this.algorithm, this.key, iv);
        
        let encrypted = cipher.update(text, 'utf8', 'hex');
        encrypted += cipher.final('hex');
        
        const authTag = cipher.getAuthTag();
        
        return {
            // Combine encrypted data and auth tag
            encrypted: encrypted + authTag.toString('hex'),
            iv: iv.toString('hex')
        };
    }

    decrypt(encrypted: string, iv: string): string {
        const decipher = crypto.createDecipheriv(
            this.algorithm,
            this.key,
            Buffer.from(iv, 'hex')
        );
        
        // Split auth tag from encrypted data
        const authTag = Buffer.from(encrypted.slice(-32), 'hex');
        const encryptedText = encrypted.slice(0, -32);
        
        decipher.setAuthTag(authTag);
        
        let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        
        return decrypted;
    }
}

type MessageHandler = (channel: string, message: string, meta: any) => void;
type EventHandler = (event: any) => void;
type TokenRefreshHandler = (newToken: string, newRefreshToken: string) => void;

class TwitchApiClient {
    private static instance: TwitchApiClient | null = null;
    private client: Chat;
    private readonly config: TwitchConfig;
    private isConnected: boolean = false;
    private reconnectInterval: number;
    private tokenRefreshInterval: number;
    private tokenRefreshTimeout?: NodeJS.Timeout;
    private messageHandlers: Set<MessageHandler> = new Set();
    private eventHandlers: Map<string, Set<EventHandler>> = new Map();
    private tokenRefreshHandlers: Set<TokenRefreshHandler> = new Set();
    private currentToken: string;
    private tokenEncryption: TokenEncryption;
    private tokenStorage: TokenStorage;

    private constructor(config: TwitchConfig) {
        this.config = config;
        this.reconnectInterval = config.reconnectInterval ?? 5000;
        this.tokenRefreshInterval = config.tokenRefreshInterval ?? 3600000;
        this.currentToken = config.token;
        this.tokenEncryption = new TokenEncryption(config.encryptionKey);
        this.tokenStorage = config.storage ?? new FileTokenStorage();

        this.client = this.createClient();
        this.setupEventHandlers();
        this.initializeTokens().then(() => {
            this.connect();
            this.scheduleTokenRefresh();
        });
    }

    private async initializeTokens(): Promise<void> {
        try {
            const storedTokens = await this.tokenStorage.load();
            if (storedTokens) {
                // Decrypt and validate stored tokens
                const accessToken = this.tokenEncryption.decrypt(
                    storedTokens.accessToken,
                    storedTokens.iv
                );
                const refreshToken = this.tokenEncryption.decrypt(
                    storedTokens.refreshToken,
                    storedTokens.iv
                );

                // Check if tokens are expired
                if (Date.now() < storedTokens.expiresAt) {
                    this.currentToken = accessToken;
                    this.config.refreshToken = refreshToken;
                } else {
                    // Tokens expired, refresh them
                    await this.refreshToken();
                }
            }
        } catch (error) {
            console.error('Error initializing tokens:', error);
            // Fall back to provided tokens
        }
    }

    private async saveTokens(
        accessToken: string,
        refreshToken: string,
        expiresIn: number
    ): Promise<void> {
        const iv = crypto.randomBytes(16).toString('hex');
        const encryptedAccess = this.tokenEncryption.encrypt(accessToken);
        const encryptedRefresh = this.tokenEncryption.encrypt(refreshToken);

        const tokens: EncryptedTokens = {
            iv,
            accessToken: encryptedAccess.encrypted,
            refreshToken: encryptedRefresh.encrypted,
            expiresAt: Date.now() + (expiresIn * 1000)
        };

        await this.tokenStorage.save(tokens);
    }

    private createClient(): Chat {
        return new Chat({
            username: this.config.username,
            token: this.currentToken,
            log: { level: 'warn' }
        });
    }

    public static getInstance(config: TwitchConfig): TwitchApiClient {
        if (!TwitchApiClient.instance) {
            TwitchApiClient.instance = new TwitchApiClient(config);
        }
        return TwitchApiClient.instance;
    }

    private async refreshToken(): Promise<void> {
        try {
            const response = await fetch('https://id.twitch.tv/oauth2/token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams({
                    client_id: this.config.clientId,
                    client_secret: this.config.clientSecret,
                    grant_type: 'refresh_token',
                    refresh_token: this.config.refreshToken
                })
            });

            if (!response.ok) {
                throw new Error(`Failed to refresh token: ${response.statusText}`);
            }

            const data = await response.json() as TokenResponse;
            
            // Update tokens
            this.currentToken = data.access_token;
            this.config.refreshToken = data.refresh_token;

            // Save encrypted tokens
            await this.saveTokens(
                data.access_token,
                data.refresh_token,
                data.expires_in
            );

            // Notify handlers of token refresh
            this.tokenRefreshHandlers.forEach(handler => 
                handler(data.access_token, data.refresh_token)
            );

            // Reconnect with new token
            await this.reconnectWithNewToken();

            // Schedule next refresh based on expires_in
            const refreshIn = (data.expires_in - 300) * 1000; // Refresh 5 minutes before expiry
            this.scheduleTokenRefresh(refreshIn);

        } catch (error) {
            console.error('Token refresh failed:', error);
            this.scheduleTokenRefresh(60000); // Retry in 1 minute
        }
    }

    private async reconnectWithNewToken(): Promise<void> {
        try {
            // Disconnect existing client
            await this.disconnect();

            // Create new client with updated token
            this.client = this.createClient();
            
            // Reconnect
            await this.connect();
        } catch (error) {
            console.error('Failed to reconnect with new token:', error);
            this.handleDisconnect();
        }
    }

    private scheduleTokenRefresh(interval?: number): void {
        if (this.tokenRefreshTimeout) {
            clearTimeout(this.tokenRefreshTimeout);
        }

        this.tokenRefreshTimeout = setTimeout(
            () => this.refreshToken(),
            interval ?? this.tokenRefreshInterval
        );
    }

    private async connect(): Promise<void> {
        try {
            await this.client.connect();
            this.isConnected = true;
            
            // Join configured channels
            for (const channel of this.config.channels) {
                await this.client.join(channel);
                console.log(`Connected to channel: ${channel}`);
            }
        } catch (error) {
            console.error('Failed to connect:', error);
            this.handleDisconnect();
        }
    }

    private handleDisconnect(): void {
        this.isConnected = false;
        console.log(`Reconnecting in ${this.reconnectInterval}ms...`);
        setTimeout(() => this.connect(), this.reconnectInterval);
    }

    private setupEventHandlers(): void {
        // Handle chat messages
        this.client.on('PRIVMSG', (message) => {
            const { channel, message: text, tags } = message;
            this.messageHandlers.forEach(handler => handler(channel, text, tags));
        });

        // Handle disconnections
        this.client.on('disconnect', () => {
            console.log('Disconnected from Twitch');
            this.handleDisconnect();
        });

        // Handle authentication failures
        this.client.on('authentication', (error) => {
            if (error) {
                console.error('Authentication failed:', error);
                this.refreshToken(); // Attempt immediate token refresh
            }
        });

        // Handle errors
        this.client.on('error', (error) => {
            console.error('Twitch client error:', error);
        });
    }

    public async disconnect(): Promise<void> {
        try {
            if (this.tokenRefreshTimeout) {
                clearTimeout(this.tokenRefreshTimeout);
            }
            await this.client.disconnect();
            this.isConnected = false;
        } catch (error) {
            console.error('Error disconnecting:', error);
            throw error;
        }
    }

    public isConnectedToTwitch(): boolean {
        return this.isConnected;
    }

    public getConnectedChannels(): string[] {
        return [...this.config.channels];
    }

    public getCurrentToken(): string {
        return this.currentToken;
    }

    // ... (rest of the previous methods remain the same)

    // New method to manually rotate encryption key
    public async rotateEncryptionKey(newKey: string): Promise<void> {
        const oldEncryption = this.tokenEncryption;
        this.tokenEncryption = new TokenEncryption(newKey);

        // Re-encrypt tokens with new key
        await this.saveTokens(
            this.currentToken,
            this.config.refreshToken,
            this.tokenRefreshInterval / 1000
        );
    }
}